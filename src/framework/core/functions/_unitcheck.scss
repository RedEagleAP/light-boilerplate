// ===================================================
// Unit Checks
// ===================================================

/// Strip Units from Values
///
/// @group core - inspect
///
/// @param  {number} $number - Value
///
/// @return {number} Value without units
///
/// @example scss - scss
///   .box {
///     $s: 25px;
///     width: strip-units($s) + 0%;
///   }
///
/// @example css - css
///   .box {
///     width: 25%;
///   }
@function strip-units($number) {
  $number: to-number($number);

  // If the Value is not a Number Break the Function
  @if type-of($number) != 'number' {
    @warn "#{$number} is not a number for strip-unit.";
    @return false;

  } @else {
    // If the Value is unitless
    @if unitless($number) {
      @return $number;

    // Remove the Units
    } @else {
      @return $number / ($number * 0 + 1);
    }
  }
}

/// Add the Default Unit on unitless Values
///
/// @group core - inspect
///
/// @param  {number} $value - Value
///
/// @return {number}
///
/// @example scss - scss
///   .box {
///     $s: 25;
///     width: unit-check($s);
///   }
///
/// @example css - css
///   .box {
///     width: 25px;
///   }
@function unit-check($value) {
  @if unitless($value) {
    @if $meow-default-unit == rem {
      @return $value + 0rem;

    } @else if $meow-default-unit == em {
      @return $value + 0em;

    } @else {
      @return $value + 0px;
    }
  } @else {
    @return $value;
  }
}

/// Clamp a Number between a min and max values,
/// Perfect for percentage
///
/// @group core - inspect
///
/// @param  {number} $value - The Value that need to be clamped
/// @param  {number} $min   - The possible minimal value
/// @param  {number} $max   - The possible max Value
///
/// @return {number}        - Clamped Value
///
/// @example scss - scss
///   .box {
///     $s1: 25;
///     $s2: 13;
///     width: clamp($s1, 5, 20) + 0px;
///     height: clamp($s2, 5, 20) + 0px;
///   }
///
/// @example css - css
///   .box {
///     width: 20px;
///     height: 13px;
///   }
@function clamp($value, $min, $max) {
  @return if($value > $max, $max, if($value < $min, $min, $value));
}


///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);;
}


///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if not index(map-keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }

  @return $value * map-get($units, $unit);
}
