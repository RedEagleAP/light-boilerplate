// ===================================================
// Various Color Functions
// ===================================================

/// Calculate the Luma Value from a Color
///
/// @group core - colors
///
/// @param  {color}   $color - Color Value
///
/// @return {Number}
///
/// @example scss - scss
///   .test {
///     content: luma(red);
///   }
@function luma($color) {
  @return (red($color) * .299) + (green($color) * .587) + (blue($color) * .114);
}

/// Check if Color1 is greater than Color2.
///
/// @group core - colors
///
/// @require {function} luma
///
/// @param  {color}  $color2 - Color Value
/// @param  {color}  $color1 - Color Value
///
/// @return {bool}
///
/// @example scss - scss
///   @if luma-gte(red, blue) {}
@function luma-gte($color1, $color2) {
  @if luma($color1) >= luma($color2) {
    @return true;
  }
  @else {
    @return false;
  }
}

/// Check if Color1 is smaller than Color2.
///
/// @group core - colors
///
/// @require {function} luma
///
/// @param  {color}  $color1 - Color Value
/// @param  {color}  $color2 - Color Value
///
/// @return {bool}
///
/// @example scss - scss
///   @if luma-lte(red, blue) {}
@function luma-lte($color1, $color2) {
  @if luma($color1) <= luma($color2) {
    @return true;
  }
  @else {
    @return false;
  }
}

/// Calculate the Luma Difference between Color1 and Color2
///
/// @group core - colors
///
/// @require {function} luma
///
/// @param  {color}  $color1 - Color Value
/// @param  {color}  $color2 - Color Value
///
/// @return {number}
///
/// @example scss - scss
///   .test {
///     content: luma-diff(red, blue);
///   }
@function luma-diff($color1, $color2) {
  @return luma($color1) - luma($color2);
}

/// Tint up the Color - normally mix with white
///
/// @group core - colors
///
/// @param  {color}  $color             - Color value
/// @param  {number} $amount            - Mix Value
/// @param  {color}  $tint-color [#fff] - Color for Tint
///
/// @return {Color}
///
/// @example scss - scss
///   .test {
///     color: tint(#00e5ff,20);
///   }
@function tint($color, $amount, $tint-color: #fff) {
  @return mix($tint-color, $color, clamp(strip-units($amount), 0, 100));
}

/// Shade down the Color - normally mix with black
///
/// @group core - colors
///
/// @param  {color}  $color              - Color value
/// @param  {number} $amount             - Mix Value
/// @param  {color}  $shade-color [#000] - Color for shade
///
/// @return {Color}
///
/// @example scss - scss
///   .test {
///     color: shade(#00e5ff,10);
///   }
@function shade($color, $amount, $shade-color: #000) {
  @return mix($shade-color, $color, clamp(strip-units($amount), 0, 100));
}

/// Pick the Color Values from the Color Map
///
/// @group core - colors
///
/// @param  {string} $target - Desired color
/// @param  {string} $key    - Optional Key (default: `color`)
/// @param  {map}    $map    - Color Map [$meow-color-map]
///
/// @return {color}
///
/// @example scss - scss
///   .box {
///     color: c('white');
///     background-color: c('primary');
///   }
@function c($target, $key: color, $map: $meow-color-map) {
  @if map-has-key($map, $target) {
    @return map-get(map-get($map, $target), $key);

  } @else {
    @if map-filled($map) {
      @warn "The color '#{$target}' is not included in the map. Possible Colorkeys: #{map-keys($map)}";
    } @else {
      @warn "The Color Map is Empty"
    }
  }
}

/// Build a Color list with eval steps
///
/// @group core - colors
///
/// @param {list}   $color           - Color Values
/// @param {number} $steps [2]       - Number off steps to reach the other color
/// @param {number} $pointer [false] - Move the Pointer to one Color Value from the list
///
/// @return {list}  Returns a List off colors or one color value
///
/// @example scss - scss
///   .test {
///     content: color-scale(red blue, 20, 5);
///     content: color-scale(red yellow, 10);
///   }
///
/// @example css - css
///   .test {
///     content: #c90036;
///     content: red #ff1c00 #ff3900 #ff5500 #ff7100 #ff8e00 #ffaa00 #ffc600 #ffe300 yellow;
///   }
@function color-scale($color, $steps: 2, $pointer: false) {
  // Define default vars
  $list: null;
  $colors: null;

  // Manipulate Steps when is too low
  @if $steps < 2 {
    $steps: 2;
    @warn 'Step Number is too low - is clamped to minimum off 2';
  }

  // Calculate the step size
  $c: 100 / ($steps - 1);

  // Check the length of the color value
  @if length($color) == 2 {

    // If $pointer is false generate a color list
    @if $pointer == false {

      // Loop it
      @for $i from 0 through ($steps - 1) {
        $colors: mix(nth($color,1), nth($color,2), (100 - ($c * ($i))));

        // Add Values to the list
        $list: append($list, $colors);
      }

      // Return a list with Color Values
      @return $list;

    } @else {

      // Check $pointer values
      $pointer: strip-units($pointer);
      $pointer: clamp($pointer, 0, $steps);

      // Build the Color Value
      $colors: mix(nth($color,1), nth($color,2), (100 - ($c * ($pointer - 1))));

      // Return Color
      @return $colors;
    }

  } @else {
    @warn 'Not enough Color Values - the Function need two Values.'
  }
}

/// Build an individual Color Stack
///
/// @group core - colors
///
/// @param {list}   $color  - Color Values
/// @param {list}   $stacks - Individual steps between the color mix
///
/// @return {list}
///
/// @example scss - scss
///   .test {
///     content: color-stack(red blue,2 3 4 5 10);
///     content: color-stack(red yellow, 1 5 10);
///   }
///
/// @example css - css
///   .test {
///     content: #0500fa #0800f7 #0a00f5 #0d00f2 #1900e6;
///     content: #fffc00 #fff200 #ffe600;
///   }
@function color-stack($color, $stacks) {
  // Define default vars
  $list: null;
  $own-stack: null;
  $stack-value: null;

  // Check the length of the color value
  @if length($color) == 2 {

    // Function need minimum two stack values
    @if length($stacks) > 1 {

      // Filter all Values above 100 from stacks list
      @for $o from 1 through length($stacks) {
        @if nth($stacks, $o) <= 100 {
          $own-stack: append($own-stack, nth($stacks,$o));
        }
      }

      // Remove Duplicates
      $own-stack: sl-remove-duplicates($own-stack);

      // Get length
      $stack-length: length($own-stack);

      // Loop it
      @for $i from 1 through ($stack-length - 1){
        // Clamp the Stack value
        $mod: clamp(nth($stacks, $i), 0, 100);

        // Build Color Value
        $colors: mix(nth($color,1), nth($color,2), $mod);

        // Add Values to the list
        $list: append($list, $colors);
      }

      // Return the Color Values as list
      @return $list;

    } @else if length($stacks) == 1 {
      // Clamp the Stack value
      $mod: clamp($stacks, 0, 100);

      // Build Color Value
      $colors: mix(nth($color,1), nth($color,2), $mod);

      // Return the Color Values as list
      @return $colors;

    } @else {
      @warn 'Not enough Stacks to build a Color Stack'
    }

  } @else {
    @warn 'Not enough Color Values - the Function need two Values.'
  }
}
