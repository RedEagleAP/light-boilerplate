// ===================================================
// Normalize
// ===================================================

html {
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  background: transparent;

  @if map-get($meow-activate, box-sizing) {
    box-sizing: border-box;
  }

  @if map-get($meow-typo, unit)==rem {
    @if $meow-active-responsive-fonts !=false {
      @include responsive-fontsize($meow-active-responsive-fonts);
    }

    @else {
      font-size: map-get($meow-typo, base-scale) + 0%;
    }

  }

  @else {
    font-size: map-get($meow-typo, base-scale) + 0%;
  }

  text-rendering: optimizeLegibility;
}

// Global Activation
* {
  @if map-get($meow-activate, antialias) {
    @include antialias;
  }

  @if map-get($meow-activate, box-sizing)==true {

    &,
    &:before,
    &:after {
      box-sizing: inherit;
    }
  }
}

html,
body {
  min-height: 100%;
}

body {
  margin: 0;
  padding: 0;
  position: relative;
  color: map-get($meow-color-route, text);
  @include fontsize(map-get($meow-typo, base-size));
  line-height: map-get($meow-typo, line-height);

  @if map-get($meow-activate, hyphens) {
    @include text-hyphen;
  }

  @if map-get($meow-color-route, body) {
    background-color: map-get($meow-color-route, body);
  }

  @if map-get($meow-typo-style, base-weight) {
    font-weight: map-get($meow-typo-style, base-weight);
  }

  overflow-x: hidden;
}

@if map-get($meow-activate, hyphens)==true {

  abbr,
  acronym,
  code,
  dir,
  kbd,
  listing,
  plaintext,
  q,
  samp,
  tt,
  var,
  xmp {
    hyphens: none;
  }
}

main {
  display: block;
}

h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
dl,
dd,
ol,
ul {
  margin-top: 0
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

audio,
progress,
canvas,
video {
  display: inline-block;
}

body,
button,
input,
select,
textarea,
.sg-body {
  font-family: map-get($meow-typo-style, base-font);
}

audio:not([controls]) {
  display: none;
  height: 0;
}

select,
option,
button,
a,
input[type="button"],
input[type="reset"],
input[type="submit"] {
  cursor: pointer;
}

[hidden],
template {
  display: none;
}

// Main Heading Style
%heading {
  text-rendering: optimizeLegibility;

  @if map-get($meow-global-heading, texttransform) !=false {
    text-transform: map-get($meow-global-heading, texttransform);
  }

  @if map-get($meow-global-heading, lineheight) !=false {
    @if map-get($meow-global-heading, lineheight)==d {
      line-height: 1.25;

    }

    @else {
      @include lineheight(map-get($meow-global-heading, lineheight));
    }
  }

  @if map-get($meow-global-heading, marginbottom) !=false {
    @include marginbottom(map-get($meow-global-heading, marginbottom));
  }

  @if map-get($meow-global-heading, fontweight) !=false {
    font-weight: map-get($meow-global-heading, fontweight);
  }

  @if map-get($meow-typo-style, heading-font) !=false OR map-get($meow-color-route, headline) !=false {
    @if map-get($meow-typo-style, heading-font) !=false {
      font-family: map-get($meow-typo-style, heading-font);
    }

    @if map-get($meow-color-route, headline) !=false {
      color: map-get($meow-color-route, headline);
    }
  }
}

// Generate Fontsizes
@if $meow-generate-typostyles {
  @include typogenerator;
}

// Group Wrapper for Headlines
.header-stack {
  @if map-get($meow-global-heading, marginbottom) !=false {
    @include marginbottom(map-get($meow-global-heading, marginbottom));
  }

  > * {
    margin-bottom: 0
  }

  @if map-get($meow-typo-margin, top) > 0 {

    p + & {
      @include margintop(map-get($meow-typo-margin, top));
    }
  }
}

// Paragraph
p {

  @include marginbottom(map-get($meow-typo-margin, bottom));

  @if map-get($meow-typo-margin, top) > 0 {

    + h1,
    + h2,
    + h3,
    + h4,
    + h5,
    + h6 {
      @include margintop(map-get($meow-typo-margin, bottom) * 1.8);
    }
  }
}

// Links
a {
  outline: 0;
  line-height: inherit;
  background: transparent;
  color: map-get($meow-color-route, link);
  transition: all 0.25s cubic-bezier(0.215, 0.610, 0.355, 1);

  @if map-get($meow-typo-style, link-decoration) {
    text-decoration: underline;
  }

  @else {
    text-decoration: none;
  }

  &:hover,
  &.link-hover {
    color: map-get($meow-color-route, link-hover);

    @if map-get($meow-typo-style, link-decoration-hover) {
      text-decoration: underline;
    }

    @else {
      text-decoration: none;
    }
  }

  &:active,
  &.is-active {
    color: map-get($meow-color-route, link-active);
  }

  /*Disable :focus on elements affects the accessibility  of interfaces.
   *Use wisely!
   */
  &:hover,
  &:active,
  &:focus {
    outline: 0;
  }
}

// Bold Style for Texts
strong {
  @if map-get($meow-typo-style, bold-weight) {
    font-weight: map-get($meow-typo-style, bold-weight);
  }

  @if map-get($meow-typo-style, bold-font) {
    font-family: map-get($meow-typo-style, bold-font);
  }
}

// Italic Style for Texts
em,
dfn {
  @if map-get($meow-typo-style, italic-style) {
    font-style: map-get($meow-typo-style, italic-style);
  }

  @if map-get($meow-typo-style, italic-font) !=false {
    font-family: map-get($meow-typo-style, italic-font);
  }
}


// Abbr
abbr {
  font-variant: small-caps;
  text-transform: lowercase;

  &[title] {
    border-bottom: none;
    text-decoration: underline;
    text-decoration: underline dotted;

    &:hover {
      cursor: help;
    }
  }
}

// For Highlightning text passages, also for hightlightning with mouse select
mark,
.hightlight,
::selection {
  background: map-get($meow-color-route, highlight-bg);
  color: map-get($meow-color-route, hightlight-text);
}

//  Styles for Unordered, Ordered and Definition Lists. If a `<ul>` or `<dl>`
//  is wrapped in a `<nav>`, the list /got an neutral style.
ul,
dl {
  list-style-type: map-get($meow-typo-sizes, list-style);
  padding-left: map-get($meow-typo-sizes, list-margin) + 0px;
  @include marginbottom(map-get($meow-typo-margin, bottom));

  nav & {
    list-style-type: none;
    margin-bottom: 0;
    padding-left: 0;
  }
}

ol {
  padding-left: map-get($meow-typo-sizes, list-margin) + 2px;
  @include marginbottom(map-get($meow-typo-margin, bottom));
}

li,
dt,
dd {
  @if map-get($meow-typo-sizes, list-fontsize) !=false {
    @include fontsize(map-get($meow-typo-sizes, list-fontsize));
  }

  @if map-get($meow-typo-sizes, list-lineheight) !=false {
    line-height: map-get($meow-typo-sizes, list-lineheight);
  }
}

li {

  > ul,
  > ol {
    margin-bottom: 0;
  }
}

dt,
dd {
  > dl {
    margin-bottom: 0;
  }
}


// Hairline
hr {
  @include marginbottom(map-get($meow-typo-margin, bottom));
  height: map-get($meow-hairline, height) + 0px;
  border-left: 0;
  border-bottom: 0;
  border-right: 0;
  border-top: (map-get($meow-hairline, height) + 0px) map-get($meow-hairline, style) map-get($meow-hairline, color);
  position: relative;

  @if map-get($meow-typo-margin, top) > 0 {
    @include margintop(map-get($meow-typo-margin, bottom));
  }
}

// For write some code snippets
code,
kbd,
pre,
samp {
  @if map-get($meow-typo-sizes, code-fontsize) !=false {
    @include fontsize(map-get($meow-typo-sizes, code-fontsize));
  }

  @if map-get($meow-typo-sizes, code-lineheight) !=false {
    line-height: map-get($meow-typo-sizes, code-lineheight);
  }

  @if map-get($meow-typo-style, code-weight) !=false {
    font-weight: map-get($meow-typo-style, code-weight);
  }

  @if map-get($meow-typo-style, code-font) !=false {
    font-family: map-get($meow-typo-style, code-font);

  }

  @else {
    font-family: monospace, monospace;
  }
}

pre {
  white-space: pre;
  @include marginbottom(map-get($meow-typo-margin, bottom));

  > code {
    word-wrap: normal;
    white-space: pre-wrap;
  }
}

code {
  white-space: pre;
}

//  Quotes
q {
  quotes: "\201C""\201D""\2018""\2019";

  &:before,
  &:after {
    content: '';
    content: none;
  }
}

// Some Styles for Smaller Texts
small {
  font-size: 80%;
}

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

i {
  font-style: normal;
  display: inline-block;
}

// Simple Style for Blockquotes
blockquote {
  margin-left: 0;
  margin-right: 0;
  @include marginbottom(map-get($meow-typo-margin, bottom));

  & p {
    @if map-get($meow-typo-sizes, quote-fontsize) !=false {
      @include fontsize(map-get($meow-typo-sizes, quote-fontsize));
    }

    @if map-get($meow-typo-sizes, quote-lineheight) !=false {
      line-height: map-get($meow-typo-sizes, quote-lineheight);
    }
  }

  cite {
    font-style: normal;

    @if map-get($meow-typo-sizes, cite-fontsize) !=false {
      @include fontsize(map-get($meow-typo-sizes, cite-fontsize));
    }

    @if map-get($meow-typo-sizes, cite-lineheight) !=false {
      line-height: map-get($meow-typo-sizes, cite-lineheight);
    }

    &:before {
      content: '\2014 \0020';
    }
  }

  // The Last off all inner Elements get not bottom spacing
  *:last-child {
    margin-bottom: 0;
  }
}

blockquote,
q,
cite {
  @if map-get($meow-typo-style, quote-font) !=false {
    font-family: map-get($meow-typo-style, quote-font);
  }

  @if map-get($meow-typo-style, quote-weight) !=false {
    font-weight: map-get($meow-typo-style, quote-weight);
  }

  @if map-get($meow-typo-style, quote-style) !=false {
    font-style: map-get($meow-typo-style, quote-style);
  }

  @if map-get($meow-color-route, blockquote) !=false {
    color: map-get($meow-color-route, blockquote);
  }
}

// Base Style for Images. Images without `height` and `width` are fluid, to there max-width.
img {
  border-style: none;
  max-width: 100%;
  height: auto;

  &[width],
  &[height] {
    max-width: none;
  }
}

// Is a container for Images, all images inside `<figure>` fill the complete space.
figure {
  margin: 0;

  img {
    display: block;
    max-width: none;
    width: 100%;
  }
}

// Simple Wrapper to remove `max-width` from embed google Maps
#map_canvas,
.map_canvas {

  img,
  embed,
  object {
    max-width: none !important;
  }
}

svg:not(:root) {
  overflow: hidden;
}

// Make Video Elements Fluid
video {
  width: 100% !important;
  height: auto !important;
}

// Fieldset
fieldset {
  border: 0;
  padding: 0.35em 0.75em 0.625em;
}

//  Legend
legend {
  box-sizing: border-box;
  color: inherit;
  display: table;
  max-width: 100%;
  border: 0;
  padding: 0;
  white-space: normal;
}


// Input
input {
  line-height: normal;
  /*Disable :focus on elements affects the accessibility  of interfaces.
   *Use wisely!
   */
  &:focus {
    outline: 0;
  }
}

// Buttons, Selects, Inputs

// markup:
// <button>Button</button><br>
// <input type="submit" value="Submit"><br>
// <input type="reset" value="Reset"><br>
// <input type="checkbox" value="1"><br>
// <input type="radio" value="1"><br>
// <input type="search" value="1"><br>
button,
optgroup,
input,
select,
textarea {
  font-family: inherit;
  font-size: 100%;
  margin: 0;
  color: inherit;
}

button {
  line-height: normal;
  overflow: visible;
}

button,
select {
  text-transform: none;
}

html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: none;
}

button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
}

button[disabled],
html input[disabled] {
  cursor: default;
}

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  cursor: pointer;
  padding: 0;
}

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

input[type="search"] {
  -webkit-appearance: textfield;
  outline-offset: -2px;
}

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

::-webkit-file-upload-button {
  -webkit-appearance: button;
  font: inherit;
}

/*Disable :focus on elements affects the accessibility  of interfaces.
 *Use wisely!
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

button:focus {
  outline: none;
}

// Textarea
textarea {
  overflow: auto;
  vertical-align: top;
  resize: vertical;
}

// Table Elements
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}
